public String decodeString(String s) {

    int[] index = new int[1];
    return decode(s, index);

}

private String decode(String s, int[] index) {
    int number = 0;
    StringBuffer sb = new StringBuffer();


    //  '[' should be the start of the recursion, before that should calculate the number
    while (index[0] < s.length()) {
        char ch = s.charAt(index[0]);

        index[0]++;

        if (isDigit(ch)) {
            number = number * 10 + ch - '0';
        } else if (ch == '[') {
            // start recursion
            String decodeSubStr = decode(s, index);

            // compute result
            for (int j = 0; j < number; j++) {
                sb.append(decodeSubStr);
            }
            // clean up current count
            number = 0;

        } else if (ch == ']') {
            // should return the accumulated string
            return sb.toString();
        } else {
            sb.append(ch);
        }

    }

    return sb.toString();
}

private boolean isDigit(char ch) {
    return Character.isDigit(ch);
}

I/O :

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".
