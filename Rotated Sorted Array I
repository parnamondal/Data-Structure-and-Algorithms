class Solution {
  int[] nums;
  int target;

  public int search(int[] nums, int target) {
    if (nums == null || nums.length == 0) return -1;
    if (nums.length == 1) {
      return nums[0] == target ? 0 : -1;
    }
    this.nums = nums;
    this.target = target;
    int len = nums.length - 1;
    int rotation = getRotationPoint();
    // When there are no rotation
    if (rotation == 0) return search(0, len);
    // Search in the left part of the array
    // First element can be the target
    if (target >= nums[0]) return search(0, rotation);
    // Search in the right part of the array
    else return search(rotation, len);
  }

  private int getRotationPoint() {
    int len = nums.length - 1;
    // when there is no rotation
    if (nums[0] < nums[len]) {
      return 0;
    }
    int left = 0, right = len;
    while (left < right) {
      int mid = left + (right - left) / 2;
      // Next element is the rotation point
      if (nums[mid] > nums[mid + 1]) return (mid + 1);
      else if (nums[mid] > nums[left]) left = (mid + 1);
      else right = mid;
    }
    return 0;
  }

  // Binary Search for the target in the array
  private int search(int left, int right) {
    while (left <= right) {
      int mid = left + (right - left) / 2;
      if (nums[mid] == target) return mid;
      if (nums[mid] > target) right = (mid - 1);
      else left = (mid + 1);
    }
    return -1;
  }
}

I/O :
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
