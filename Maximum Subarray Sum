Approach 1: Greedy

public class MaximumSubArraySum {

  public static void main(String[] args) {
    int[] arr = {0,-1};
    System.out.println(maxSubArray(arr));
  }

  public static int maxSubArray(int[] nums) {
    if (nums == null) {
      return 0;
    }
    if (nums.length == 1) {
      return nums[0];
    }
    int curSum = 0;
    int maxSum = 0;
    boolean isAllNegative = true;
    int minNegative = Integer.MIN_VALUE;

    for (int i = 0; i < nums.length; i++) {

      // We found a positive number or a zero in the array
      if (nums[i] >= 0 && isAllNegative) {
        isAllNegative = false;
      }

      /**
       * Track the minimum negative number in the array
       * when all array numbers are negative
       */
      if (nums[i] < 0 && nums[i] > minNegative && isAllNegative) {
        minNegative = nums[i];
      }

      // Adding array elements one by one
      curSum += nums[i];

      // Replace currentSum with 0 when it becomes less than 0
      if (curSum < 0) {
        curSum = 0;
      }
      // Replace the maximum sum when the current sum is greater.
      // Means we have a new sub-array with greater sum
      if (maxSum < curSum) {
        maxSum = curSum;
      }
    }
    return isAllNegative ? minNegative : maxSum;
  }
}

Approach 2: Dynamic Programming (Kadane's Algorithm)

class Solution {
  public int maxSubArray(int[] nums) {
    int n = nums.length, maxSum = nums[0];
    for(int i = 1; i < n; ++i) {
      if (nums[i - 1] > 0) nums[i] += nums[i - 1];
      maxSum = Math.max(nums[i], maxSum);
    }
    return maxSum;
  }
}

I/O :

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
