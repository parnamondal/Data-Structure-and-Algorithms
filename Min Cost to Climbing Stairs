public int minCostClimbingStairs(int[] cost) {

    if (cost == null || cost.length == 0) {
        return 0;
    }
    int len = cost.length;
    if (len == 1) return cost[0];
    if (len == 2) return Math.min(cost[0], cost[1]);

    int[] dp = new int[len];
    dp[0] = cost[0];
    dp[1] = cost[1];

    for (int i = 2; i < cost.length; i++) {
        dp[i] = cost[i] + Math.min(dp[i - 1], dp[i - 2]);
    }
    return Math.min(dp[len - 2], dp[len - 1]);
}

/*The problem can also be solved in O(1) space without a dp array and using some constant variables.*/

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        if (cost == null || cost.length == 0) return 0;
        int f1 = cost[0];
        int f2 = cost[1];
        for (int i = 2; i < cost.length; i++) {
            int f3 = cost[i] + Math.min(f1, f2);
            f1 = f2;
            f2 = f3;
        }
        return Math.min(f1, f2);
    }
}

I/O :

Input: cost[] = {2, 5, 3, 1, 7, 3, 4}
Output: 9 
Steps: 2->3->1->3

Input: cost = {1, 100, 1, 1, 1, 100, 1, 1, 100, 1}
Output: 6
Steps: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].
 
